<?php

/**
 * BaseSinaWeibo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $idstr
 * @property double $wid
 * @property string $text
 * @property timestamp $created_at
 * @property timestamp $colletion_at
 * @property string $source
 * @property integer $in_reply_to_status_id
 * @property integer $in_reply_to_user_id
 * @property string $in_reply_to_screen_name
 * @property string $mid
 * @property string $bmiddle_pic
 * @property string $original_pic
 * @property string $thumbnail_pic
 * @property integer $reposts_count
 * @property boolean $is_delete
 * @property integer $comments_count
 * @property integer $uid
 * @property integer $user_id
 * @property integer $aa_id
 * @property boolean $favorited
 * @property boolean $truncated
 * @property User $User
 * @property Aa $Aa
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSinaWeibo extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('sina_weibo');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('idstr', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('wid', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('text', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('colletion_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('source', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('in_reply_to_status_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('in_reply_to_user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('in_reply_to_screen_name', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('mid', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('bmiddle_pic', 'string', 2500, array(
             'type' => 'string',
             'length' => '2500',
             ));
        $this->hasColumn('original_pic', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('thumbnail_pic', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('reposts_count', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('is_delete', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('comments_count', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('uid', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('aa_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('favorited', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('truncated', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));

        $this->option('type', 'MYISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Aa', array(
             'local' => 'aa_id',
             'foreign' => 'id'));
    }
}