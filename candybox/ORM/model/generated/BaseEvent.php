<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $type
 * @property integer $aa_id
 * @property integer $club_id
 * @property integer $user_id
 * @property string $title
 * @property timestamp $sign_start
 * @property timestamp $sign_finish
 * @property integer $sign_limit
 * @property timestamp $start
 * @property timestamp $finish
 * @property timestamp $publish_at
 * @property string $small_img_path
 * @property string $poster_path
 * @property string $custom_icon
 * @property integer $score
 * @property integer $votes
 * @property integer $num
 * @property string $address
 * @property clob $content
 * @property string $intro
 * @property string $tags
 * @property string $fields
 * @property string $category_label
 * @property boolean $is_fixed
 * @property boolean $is_club_fixed
 * @property boolean $is_closed
 * @property boolean $is_stop_sign
 * @property boolean $is_recommended
 * @property integer $total_tickets
 * @property integer $maximum_entourage
 * @property integer $maximum_receive
 * @property boolean $need_tickets
 * @property integer $points_at_least
 * @property string $receive_address
 * @property boolean $is_vcert
 * @property integer $comments_num
 * @property integer $interested_num
 * @property Aa $Aa
 * @property Club $Club
 * @property User $User
 * @property Album $Album
 * @property BbsUnit $Units
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $EventSignCategoryss
 * @property Doctrine_Collection $Signs
 * @property SysFilter $SysFilter
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('type', 'string', 30, array(
             'type' => 'string',
             'length' => '30',
             ));
        $this->hasColumn('aa_id', 'integer', 3, array(
             'type' => 'integer',
             'length' => '3',
             ));
        $this->hasColumn('club_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('title', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('sign_start', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('sign_finish', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('sign_limit', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('start', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('finish', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('publish_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('small_img_path', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('poster_path', 'string', 250, array(
             'type' => 'string',
             'length' => '250',
             ));
        $this->hasColumn('custom_icon', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('score', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('votes', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('num', 'integer', 3, array(
             'type' => 'integer',
             'default' => 1,
             'length' => '3',
             ));
        $this->hasColumn('address', 'string', 200, array(
             'type' => 'string',
             'length' => '200',
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('intro', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('tags', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('fields', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('category_label', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('is_fixed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_club_fixed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_closed', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_stop_sign', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_recommended', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('is_suspend', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('total_tickets', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('maximum_entourage', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('maximum_receive', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('need_tickets', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('points_at_least', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('receive_address', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('is_vcert', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('comments_num', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));
        $this->hasColumn('interested_num', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '4',
             ));

        $this->option('type', 'MYISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Aa', array(
             'local' => 'aa_id',
             'foreign' => 'id'));

        $this->hasOne('Club', array(
             'local' => 'club_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Album', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasOne('BbsUnit as Units', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventSignCategorys as EventSignCategoryss', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventSign as Signs', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasOne('SysFilter', array(
             'local' => 'id',
             'foreign' => 'event_id'));
    }
}