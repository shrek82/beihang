<?php

/**
 * BaseAaWeibo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $aa_id
 * @property string $topic
 * @property integer $content_id
 * @property integer $user_id
 * @property boolean $is_original
 * @property boolean $about_org
 * @property Aa $Aa
 * @property WeiboContent $WeiboContent
 * @property User $User
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAaWeibo extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('aa_weibo');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('aa_id', 'integer', 6, array(
             'type' => 'integer',
             'length' => '6',
             ));
        $this->hasColumn('topic', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('content_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('is_original', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('about_org', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('type', 'MYISAM');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Aa', array(
             'local' => 'aa_id',
             'foreign' => 'id'));

        $this->hasOne('WeiboContent', array(
             'local' => 'content_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}